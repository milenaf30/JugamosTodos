# Continuos Integration CI:
#   Es una práctica de desarrollo, que consiste en que varios desarrolladores que trabajan en un mismo proyecto 
#   suban el código a un repositorio compartido, varias veces al día. Cada commit, hace que el proyecto se re-buildea 
#   de forma tal de encontrar errores lo más tempranamente posible.

# Además con CI, se pueden realizar otras tareas:
#   - Correr pruebas,
#   - Comprobar calidad del código, mediante alguna herramienta como Lint de Android.
#   - Comprobar cobertura de las pruebas,
#   - Deployar a algún proveedores como sea la página de Git Releases

# Archivo de configuración:
#   Para CI en este proyecto se estará haciendo uso de Travis CI, que se configura mediante un archivo .travis.yml
#   Se trata de una herramienta que se puede integrar con GitHub, y que es gratuita para todos aquellos proyectos open-source.

language: android
sudo: true
jdk: oraclejdk8

env:
    matrix:
        - ANDROID_TARGET=android-19 ANDROID_ABI=armeabi-v7a
        - ANDROID_TARGET=android-21 ANDROID_ABI=armeabi-v7a
    global:
        - ADB_INSTALL_TIMEOUT=10    #Time out to 10 mins

before_cache:
    - rm -f $HOME/.gradle/caches/modules-2/modules-2.lock

cache:
  directories:      #Cache all dirs under .gradle folder
    - $HOME/.gradle/daemon      #Cache daemon logs
    - $HOME/.gradle/native      #Cache library downloaded from the gradle dependency
    - $HOME/.gradle/wrapper     #Cache the gradle

android:
    update_sdk: true
    components:
      - tools
      - platform-tools
      - tools
      - build-tools-25.0.0
      - android-23

      # Additional components
      - extra-google-google_play_services
      - extra-google-m2repository
      - extra-android-m2repository

      #system images
      - sys-img-armeabi-v7a-android-19
      - sys-img-armeabi-v7a-android-21

licenses:
    - 'android-sdk-preview-license-52d11cd2'
    - 'android-sdk-license-.+'
    - 'google-gdk-license-.+'

before_script:
    - chmod +x gradlew      #Grand permissions
    - android list targets
    - echo no | android create avd --force --name test --target $ANDROID_TARGET --abi $ANDROID_ABI    #Create AVD for given api
    - emulator -avd test -no-skin -no-audio -no-window &    #Start emulator

script:
    - echo "Travis branch is $TRAVIS_BRANCH"
    - echo "Travis branch is in pull request $TRAVIS_PULL+REQUEST"
    - android-wait-for-emulator
    - adb devices   #Display list of devices
    - adb shell input keyevent 82 &
    - ./gradlew connectedCheck -PdisablePreDex --stacktrace

before_deploy:
- cp $TRAVIS_BUILD_DIR/android.jks $HOME
- cd app/build/outputs/apk/
- jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore $HOME/android.jks
  -storepass $storepass -pass $pass app-release-unsigned.apk ExampleKeystoreAlias
- jarsigner -verify app-release-unsigned.apk
- "${ANDROID_HOME}/build-tools/25.0.2/zipalign -v 4 app-release-unsigned.apk JugamosTodos.apk"
deploy:
  provider: releases
  file: JugamosTodos.apk
  skip_cleanup: true #Evita que TRAVIS CI elimine todos los cambios hechos, luego del build.
  on: # Cuando todas las condiciones expuestas en ON se cumplen, entonces se hace el deplpy al provider especificado.
    repo: milenaf30/JugamosTodos
    tags: true #Se hace el deploy solo cuando se aplican tags al commit
    jdk: oraclejdk8
  api_key:
    secure: gETXw2N8tc4IxPutqtWZSHXoTldtoI2jY3gTjw6ou1WhSz0HbMSaGAWTGfe4RsbTrC8xlAmN8JuNDpO6PCHMrdoEGrIirSn3qXIakjaHeAAzDSEOUYSDugAN8EY4+3ewAl8Z1pT8YJ7CMY81UBMGLe2YcRt8I9VADWzRupNmhilpQB6lzzkt5RGQHKznMY1bbw/OVqthyiMax4vj8h9ERJnzxCGQ4Q50dRnqFn5Iohy4E0VzLbVTSzyUSzNynmfNlIwv3/SoaimY0s50Hb+E1mE1DsV3LRHANkTKSVy3k0FI/+ihTfPiMaLTBj9k2r1ej/DyIc2auDISM8V9sD4XmXJ+wGX0/0xoxU/w7YFPskzkoG5zmFHSJFS7Jvk1+4fUyQMHQx1cxLn1BYEh5Ifl/BMgmkhbiFUG6N7ArU4hCNG9Rt2gnr0SNnwiwyrlPoqiwgLzgxIfco/oL8JL++8jvO6XLVyl9rTebq57UJBiHWfyMXVEt7Xft1GqYoBmH25v+JiGJ0pIx5hf2RghIVK8r0kfSI1nbw93F90sqTMAA96ofSBlgSt9iqQIcCpVXe5EX/F2e2EFYqyb53ejWwFevu6pif4HpcSc05yPIim67prrnAv+93/RT129pklj1M/gSKXc6WSTvXuDPJ7XI4qbtzQXh/hBqKfqJRDFmtjnTCk=

# Un build en travis está formado por dos steps:
#   - Instalar todas las dependencias
#   - Correr todos los scripts indicados

# Se pueden correr comandos, 'before_install' y 'before_script' o 'after_script'.
# En una instancia 'before_install' se puede querer instalar dependencias extras como paquetes de Ubuntu o demás servicios.

# Cuando el build termina se pueden hacer acciones extras:
#   - Si 'after_success' -> armar una documentación o deployar a un servidor.
#   - Si 'after_failure' -> generar un log.
#   -- Se puede acceder a los resultados del build mediante la variable global $TRAVIS_TEST_RESULT

# Lifecycle:
#   - apt addons
#   - cache components
#   - before_install
#   - install
#   - before_script
#   - script
#   - before_cache
#   - after_success o after_failure
#   - before_deploy
#   - deploy
#   - after_deploy
#   - after_script